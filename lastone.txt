const int pinEntradaRS = 4;        // entra R-S
float muestreoFrec;
const int pinesSalida1[] = {13,14,15,16,17,18,19};
float frecuenciaMedida;
int i=0;

hw_timer_t *timer = NULL;  // Temporizador de hardware
volatile bool triggered = false;  // Bandera para indicar la interrupción inicial
float periodo;

void setup() {
    pinMode(pinSalida, OUTPUT);
    Serial.begin(115200);
    pinMode(pinEntradaRS, INPUT);
    attachInterrupt(digitalPinToInterrupt(pinEntradaRT), ISR, RISING);
    for(int j=0;j<10;j++)
    {
    	muestreoFrec+=medirFrecuencia();
    }
    frecuenciaMedida = muestreoFrec/j;
    periodo = 1/frecuenciaMedida;
    Serial.print("Frecuencia: ");
    Serial.print(frecuenciaMedida);
    Serial.println(" Hz");
    timer = timerBegin(0, 80, true);  // Temporizador 0, prescaler 80 (1 tick = 1 us)
    timerAttachInterrupt(timer, &onTimer, true);  // Vincular el temporizador a la función 'onTimer'
    timerAlarmWrite(timer, 3333, true);  // Configurar alarma cada 3333 us (3.33 ms)
    timerAlarmDisable(timer);  // Desactivar el temporizador al inicio
   
}

void loop() {



}


// ISR para la interrupción por flanco ascendente
void ISR() {
    if (!triggered) {  // Solo se activa en la primera interrupción
        triggered = true;  // Marca que ocurrió la interrupción inicial
        timerAlarmEnable(timer);  // Activa el temporizador para iniciar la ejecución periódica
	  // poner en HIGH los que van
	  i=1;
    }
}

// Función llamada periódicamente por el temporizador
void IRAM_ATTR onTimer() {
    // Código que deseas ejecutar periódicamente
    // Aquí pondrás la tarea que quieres repetir cada 3.33 ms
    // hacer un switch con i para poner en high lo que va.
    // tambien en cada corrida poner low los anteriores
    i++;
}


// Función para medir la frecuencia de la señal
float medirFrecuencia() {
    float valorActual;
    valorActual= analogRead(pinEntrada) * (3.3 / 4095.0);  // Lectura inicial
    // Contar dos cruces por cero para medir el periodo completo, con un timeout
    unsigned long tiempoInicio;
    boolean flag = false;
    while(valorActual>0)
    { // Espero a que llegue un flanco descendente
      valorActual= analogRead(pinEntrada) * (3.3 / 4095.0);  // Lectura inicial
    }
    while (valorActual==0) {
        valorActual = analogRead(pinEntrada) * (3.3 / 4095.0);  // Lectura analógica
        if(!flag){
          tiempoInicio = micros();
          flag = true;
        }
       // Serial.println(valorActual);
        if (valorActual > 0) 
        {
            unsigned long tiempoFinal = micros();
            float periodo = (tiempoFinal - tiempoInicio)*2;  // Tiempo de un ciclo completo en microsegundos
            return 1000000.0 / periodo;  // Frecuencia en Hz
        }
    }
   return 0;
}

